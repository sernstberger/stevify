"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var querystring = require("querystring");
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "https://localhost".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * AccountsReceivableApi - fetch parameter creator
 * @export
 */
exports.AccountsReceivableApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountsReceivableClientGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV1AccountsReceivableClientGet.');
            }
            var localVarPath = "/api/v1/AccountsReceivable/Client";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountsReceivableClientGroupGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV1AccountsReceivableClientGroupGet.');
            }
            var localVarPath = "/api/v1/AccountsReceivable/ClientGroup";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AccountsReceivableApi - functional programming interface
 * @export
 */
exports.AccountsReceivableApiFp = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountsReceivableClientGet: function (id, options) {
            var localVarFetchArgs = exports.AccountsReceivableApiFetchParamCreator(configuration).apiV1AccountsReceivableClientGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountsReceivableClientGroupGet: function (id, options) {
            var localVarFetchArgs = exports.AccountsReceivableApiFetchParamCreator(configuration).apiV1AccountsReceivableClientGroupGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AccountsReceivableApi - factory interface
 * @export
 */
exports.AccountsReceivableApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountsReceivableClientGet: function (id, options) {
            return exports.AccountsReceivableApiFp(configuration).apiV1AccountsReceivableClientGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountsReceivableClientGroupGet: function (id, options) {
            return exports.AccountsReceivableApiFp(configuration).apiV1AccountsReceivableClientGroupGet(id, options)(fetch, basePath);
        },
    };
};
/**
 * AccountsReceivableApi - object-oriented interface
 * @export
 * @class AccountsReceivableApi
 * @extends {BaseAPI}
 */
var AccountsReceivableApi = /** @class */ (function (_super) {
    __extends(AccountsReceivableApi, _super);
    function AccountsReceivableApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsReceivableApi
     */
    AccountsReceivableApi.prototype.apiV1AccountsReceivableClientGet = function (id, options) {
        return exports.AccountsReceivableApiFp(this.configuration).apiV1AccountsReceivableClientGet(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsReceivableApi
     */
    AccountsReceivableApi.prototype.apiV1AccountsReceivableClientGroupGet = function (id, options) {
        return exports.AccountsReceivableApiFp(this.configuration).apiV1AccountsReceivableClientGroupGet(id, options)(this.fetch, this.basePath);
    };
    return AccountsReceivableApi;
}(BaseAPI));
exports.AccountsReceivableApi = AccountsReceivableApi;
/**
 * AppLogApi - fetch parameter creator
 * @export
 */
exports.AppLogApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppLogByIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV1AppLogByIdGet.');
            }
            var localVarPath = "/api/v1/AppLog/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppLogGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/AppLog";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AppLogApi - functional programming interface
 * @export
 */
exports.AppLogApiFp = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppLogByIdGet: function (id, options) {
            var localVarFetchArgs = exports.AppLogApiFetchParamCreator(configuration).apiV1AppLogByIdGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppLogGet: function (options) {
            var localVarFetchArgs = exports.AppLogApiFetchParamCreator(configuration).apiV1AppLogGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AppLogApi - factory interface
 * @export
 */
exports.AppLogApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppLogByIdGet: function (id, options) {
            return exports.AppLogApiFp(configuration).apiV1AppLogByIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppLogGet: function (options) {
            return exports.AppLogApiFp(configuration).apiV1AppLogGet(options)(fetch, basePath);
        },
    };
};
/**
 * AppLogApi - object-oriented interface
 * @export
 * @class AppLogApi
 * @extends {BaseAPI}
 */
var AppLogApi = /** @class */ (function (_super) {
    __extends(AppLogApi, _super);
    function AppLogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppLogApi
     */
    AppLogApi.prototype.apiV1AppLogByIdGet = function (id, options) {
        return exports.AppLogApiFp(this.configuration).apiV1AppLogByIdGet(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppLogApi
     */
    AppLogApi.prototype.apiV1AppLogGet = function (options) {
        return exports.AppLogApiFp(this.configuration).apiV1AppLogGet(options)(this.fetch, this.basePath);
    };
    return AppLogApi;
}(BaseAPI));
exports.AppLogApi = AppLogApi;
/**
 * AuthorizedPingApi - fetch parameter creator
 * @export
 */
exports.AuthorizedPingApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthorizedPingGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/AuthorizedPing";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthorizedPingApi - functional programming interface
 * @export
 */
exports.AuthorizedPingApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthorizedPingGet: function (options) {
            var localVarFetchArgs = exports.AuthorizedPingApiFetchParamCreator(configuration).apiV1AuthorizedPingGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AuthorizedPingApi - factory interface
 * @export
 */
exports.AuthorizedPingApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthorizedPingGet: function (options) {
            return exports.AuthorizedPingApiFp(configuration).apiV1AuthorizedPingGet(options)(fetch, basePath);
        },
    };
};
/**
 * AuthorizedPingApi - object-oriented interface
 * @export
 * @class AuthorizedPingApi
 * @extends {BaseAPI}
 */
var AuthorizedPingApi = /** @class */ (function (_super) {
    __extends(AuthorizedPingApi, _super);
    function AuthorizedPingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedPingApi
     */
    AuthorizedPingApi.prototype.apiV1AuthorizedPingGet = function (options) {
        return exports.AuthorizedPingApiFp(this.configuration).apiV1AuthorizedPingGet(options)(this.fetch, this.basePath);
    };
    return AuthorizedPingApi;
}(BaseAPI));
exports.AuthorizedPingApi = AuthorizedPingApi;
/**
 * ClaimsApi - fetch parameter creator
 * @export
 */
exports.ClaimsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClaimsGet: function (clientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId', 'Required parameter clientId was null or undefined when calling apiV1ClaimsGet.');
            }
            var localVarPath = "/api/v1/Claims";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} clientId
         * @param {any} claimsFile Upload File
         * @param {string} [claimName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClaimsPost: function (clientId, claimsFile, claimName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId', 'Required parameter clientId was null or undefined when calling apiV1ClaimsPost.');
            }
            // verify required parameter 'claimsFile' is not null or undefined
            if (claimsFile === null || claimsFile === undefined) {
                throw new RequiredError('claimsFile', 'Required parameter claimsFile was null or undefined when calling apiV1ClaimsPost.');
            }
            var localVarPath = "/api/v1/Claims";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (claimName !== undefined) {
                localVarQueryParameter['claimName'] = claimName;
            }
            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }
            var formData = {};
            var isMultipartData = false;
            isMultipartData = true;
            formData["claimsFile"] = claimsFile;
            if (isMultipartData) {
                var body = new FormData();
                for (var key in formData) {
                    body.append(key, formData[key]);
                }
                localVarRequestOptions.body = body;
            }
            else {
                localVarRequestOptions.body = querystring.stringify(formData);
                localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ClaimsApi - functional programming interface
 * @export
 */
exports.ClaimsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {number} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClaimsGet: function (clientId, options) {
            var localVarFetchArgs = exports.ClaimsApiFetchParamCreator(configuration).apiV1ClaimsGet(clientId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} clientId
         * @param {any} claimsFile Upload File
         * @param {string} [claimName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClaimsPost: function (clientId, claimsFile, claimName, options) {
            var localVarFetchArgs = exports.ClaimsApiFetchParamCreator(configuration).apiV1ClaimsPost(clientId, claimsFile, claimName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ClaimsApi - factory interface
 * @export
 */
exports.ClaimsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {number} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClaimsGet: function (clientId, options) {
            return exports.ClaimsApiFp(configuration).apiV1ClaimsGet(clientId, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} clientId
         * @param {any} claimsFile Upload File
         * @param {string} [claimName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClaimsPost: function (clientId, claimsFile, claimName, options) {
            return exports.ClaimsApiFp(configuration).apiV1ClaimsPost(clientId, claimsFile, claimName, options)(fetch, basePath);
        },
    };
};
/**
 * ClaimsApi - object-oriented interface
 * @export
 * @class ClaimsApi
 * @extends {BaseAPI}
 */
var ClaimsApi = /** @class */ (function (_super) {
    __extends(ClaimsApi, _super);
    function ClaimsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimsApi
     */
    ClaimsApi.prototype.apiV1ClaimsGet = function (clientId, options) {
        return exports.ClaimsApiFp(this.configuration).apiV1ClaimsGet(clientId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {} clientId
     * @param {} claimsFile Upload File
     * @param {} [claimName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimsApi
     */
    ClaimsApi.prototype.apiV1ClaimsPost = function (clientId, claimsFile, claimName, options) {
        return exports.ClaimsApiFp(this.configuration).apiV1ClaimsPost(clientId, claimsFile, claimName, options)(this.fetch, this.basePath);
    };
    return ClaimsApi;
}(BaseAPI));
exports.ClaimsApi = ClaimsApi;
/**
 * ClientApi - fetch parameter creator
 * @export
 */
exports.ClientApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/Client";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ClientCreateDto} [clientDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientPost: function (clientDto, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/Client";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ClientCreateDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(clientDto || {}) : (clientDto || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ClientApi - functional programming interface
 * @export
 */
exports.ClientApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGet: function (options) {
            var localVarFetchArgs = exports.ClientApiFetchParamCreator(configuration).apiV1ClientGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {ClientCreateDto} [clientDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientPost: function (clientDto, options) {
            var localVarFetchArgs = exports.ClientApiFetchParamCreator(configuration).apiV1ClientPost(clientDto, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ClientApi - factory interface
 * @export
 */
exports.ClientApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGet: function (options) {
            return exports.ClientApiFp(configuration).apiV1ClientGet(options)(fetch, basePath);
        },
        /**
         *
         * @param {ClientCreateDto} [clientDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientPost: function (clientDto, options) {
            return exports.ClientApiFp(configuration).apiV1ClientPost(clientDto, options)(fetch, basePath);
        },
    };
};
/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
var ClientApi = /** @class */ (function (_super) {
    __extends(ClientApi, _super);
    function ClientApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    ClientApi.prototype.apiV1ClientGet = function (options) {
        return exports.ClientApiFp(this.configuration).apiV1ClientGet(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {} [clientDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    ClientApi.prototype.apiV1ClientPost = function (clientDto, options) {
        return exports.ClientApiFp(this.configuration).apiV1ClientPost(clientDto, options)(this.fetch, this.basePath);
    };
    return ClientApi;
}(BaseAPI));
exports.ClientApi = ClientApi;
/**
 * ClientGroupApi - fetch parameter creator
 * @export
 */
exports.ClientGroupApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupByIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV1ClientGroupByIdGet.');
            }
            var localVarPath = "/api/v1/ClientGroup/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {boolean} [active]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupGet: function (active, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/ClientGroup";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ClientGroupCreateDto} [groupDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupPost: function (groupDto, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/ClientGroup";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ClientGroupCreateDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(groupDto || {}) : (groupDto || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ClientGroupApi - functional programming interface
 * @export
 */
exports.ClientGroupApiFp = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupByIdGet: function (id, options) {
            var localVarFetchArgs = exports.ClientGroupApiFetchParamCreator(configuration).apiV1ClientGroupByIdGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {boolean} [active]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupGet: function (active, options) {
            var localVarFetchArgs = exports.ClientGroupApiFetchParamCreator(configuration).apiV1ClientGroupGet(active, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {ClientGroupCreateDto} [groupDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupPost: function (groupDto, options) {
            var localVarFetchArgs = exports.ClientGroupApiFetchParamCreator(configuration).apiV1ClientGroupPost(groupDto, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ClientGroupApi - factory interface
 * @export
 */
exports.ClientGroupApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupByIdGet: function (id, options) {
            return exports.ClientGroupApiFp(configuration).apiV1ClientGroupByIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @param {boolean} [active]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupGet: function (active, options) {
            return exports.ClientGroupApiFp(configuration).apiV1ClientGroupGet(active, options)(fetch, basePath);
        },
        /**
         *
         * @param {ClientGroupCreateDto} [groupDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ClientGroupPost: function (groupDto, options) {
            return exports.ClientGroupApiFp(configuration).apiV1ClientGroupPost(groupDto, options)(fetch, basePath);
        },
    };
};
/**
 * ClientGroupApi - object-oriented interface
 * @export
 * @class ClientGroupApi
 * @extends {BaseAPI}
 */
var ClientGroupApi = /** @class */ (function (_super) {
    __extends(ClientGroupApi, _super);
    function ClientGroupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientGroupApi
     */
    ClientGroupApi.prototype.apiV1ClientGroupByIdGet = function (id, options) {
        return exports.ClientGroupApiFp(this.configuration).apiV1ClientGroupByIdGet(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {} [active]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientGroupApi
     */
    ClientGroupApi.prototype.apiV1ClientGroupGet = function (active, options) {
        return exports.ClientGroupApiFp(this.configuration).apiV1ClientGroupGet(active, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {} [groupDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientGroupApi
     */
    ClientGroupApi.prototype.apiV1ClientGroupPost = function (groupDto, options) {
        return exports.ClientGroupApiFp(this.configuration).apiV1ClientGroupPost(groupDto, options)(this.fetch, this.basePath);
    };
    return ClientGroupApi;
}(BaseAPI));
exports.ClientGroupApi = ClientGroupApi;
/**
 * SalesSummaryApi - fetch parameter creator
 * @export
 */
exports.SalesSummaryApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSummaryClientGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV1SalesSummaryClientGet.');
            }
            var localVarPath = "/api/v1/SalesSummary/Client";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSummaryClientGroupGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV1SalesSummaryClientGroupGet.');
            }
            var localVarPath = "/api/v1/SalesSummary/ClientGroup";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SalesSummaryApi - functional programming interface
 * @export
 */
exports.SalesSummaryApiFp = function (configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSummaryClientGet: function (id, options) {
            var localVarFetchArgs = exports.SalesSummaryApiFetchParamCreator(configuration).apiV1SalesSummaryClientGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSummaryClientGroupGet: function (id, options) {
            var localVarFetchArgs = exports.SalesSummaryApiFetchParamCreator(configuration).apiV1SalesSummaryClientGroupGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SalesSummaryApi - factory interface
 * @export
 */
exports.SalesSummaryApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSummaryClientGet: function (id, options) {
            return exports.SalesSummaryApiFp(configuration).apiV1SalesSummaryClientGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSummaryClientGroupGet: function (id, options) {
            return exports.SalesSummaryApiFp(configuration).apiV1SalesSummaryClientGroupGet(id, options)(fetch, basePath);
        },
    };
};
/**
 * SalesSummaryApi - object-oriented interface
 * @export
 * @class SalesSummaryApi
 * @extends {BaseAPI}
 */
var SalesSummaryApi = /** @class */ (function (_super) {
    __extends(SalesSummaryApi, _super);
    function SalesSummaryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesSummaryApi
     */
    SalesSummaryApi.prototype.apiV1SalesSummaryClientGet = function (id, options) {
        return exports.SalesSummaryApiFp(this.configuration).apiV1SalesSummaryClientGet(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesSummaryApi
     */
    SalesSummaryApi.prototype.apiV1SalesSummaryClientGroupGet = function (id, options) {
        return exports.SalesSummaryApiFp(this.configuration).apiV1SalesSummaryClientGroupGet(id, options)(this.fetch, this.basePath);
    };
    return SalesSummaryApi;
}(BaseAPI));
exports.SalesSummaryApi = SalesSummaryApi;
//# sourceMappingURL=api.js.map